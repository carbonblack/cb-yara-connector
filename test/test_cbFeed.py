# coding: utf-8
# Copyright Â© 2014-2020 VMware, Inc. All Rights Reserved.

from unittest import TestCase

from feed import CbFeed, CbInvalidFeed

SOURCE = """{
  "feedinfo": {
    "category": "Local Feed QA Feed BBI893963562",
    "display_name": "QA Feed BBI893963562",
    "icon": "/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCAAyADIDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9MKhvL630+3ee6uIraBPvSzOEUfUnpWZ401afw/4O13VLYKbmysLi5iDDI3JGzDI9Mivj66nsNY8L6f4w+Iet6xrtxqU00djpVmyoo8ogMWY/Ki5YcIoPI98AH07qfx48AaTIUn8UWbsvX7NunH5xhqr2f7Q/w7vpAkfiaFSf+e0E0Q/NkFfJrfEvQLE7dJ+HuhxR9jqck945+pLqP0pq/FPT7g7b3wD4XmiPUW9vLA/4MsnH5UAfdGjeI9K8RQmbStStNSiHVrWdZAPrtPFaNfEvhOy8H+OtU8jw5/a3gbxQIpJrXyro3Fs5RC5UPxIhwp5yRwetfQf7NXjbV/HXw8lu9auPtd3a30los7KAzoEjYFsdT85GfYd6APV6KKKAM3xNpp1rw3q2nqMm7tJoB/wNCv8AWvhu+jbVPgbp8m0+boutTQSL3SOeNWBPoN0bD8q+9q+XV0XTfAXx11nwxr1pHP4U8WFZYklyI/ML74+R02yb06/xAnigD550Pw7qniW7FrpOnXWo3HeO1iaQj3OBwPc16r4f/ZT8Z6rGJtRNjoUGNzfapt7geu1Mj8yK6Xx3+0jd+ELy98NeD/D9r4cgsZntzJLCN+5SQWWMYVenfdmvEfEnjrxD4vkL6zrN5qAJz5c0pMY+ifdH4CgR7/ofwh8N/DDSfEHiaHxbDr+q6VptxiG1MarFJJE0a7gGZuSxAyR1rvf2VdLbT/hHazMu37bdTXA9xkR5/wDIf8q+fV0O60H4faV4XtYi3iXxlcw3MsH8UdorYgVvTe5L/RRmvs3wr4fg8KeG9M0e35hsbdIA3TdtUAsfcnn8TQM1aKKKACvO/jb8K4vij4V8iErDrNmTNYztwN3dCeytgfQgHtXolFAHxJq2ky/FVHs7uP8As/4l6Wv2e4tbjCHVUQYBBP8Ay3UDGD94DI9szw34Ht/BNovibxxaSW8EbH7BoU6lJ9QlXpuU8rED95iOegzmvqb4sfBHSviZGt5HIdK8QQAeRqUI5OOivj7w9DnI7elc18P/ANneWz1weIfHWq/8JRrUZAhSR2lhj2/dYl+XI7AgAe9AFf4E/DrVNS1q5+Ivi5c6zqGTZW7rjyIyMbsfw/L8qjsufXj3WiigAooooAKKKKACiiigAooooAKKKKAP/9k=",
    "name": "qafeedbbi893963562",
    "provider_url": "https://confluence.carbonblack.local/display/CB/CB+Response+QA",
    "summary": "Feed generated by QA Framework (QA Feed BBI893963562)",
    "tech_data": "Will trigger on MD5 hash of [c296a66022a990b22f734935a66b876a] ",
    "version": 2
  },
  "reports": [
    {
      "description": "MD5 hash [c296a66022a990b22f734935a66b876a] ",
      "id": "ID70170133447789278768703804369333656.exe",
      "iocs": {
        "md5": [
          "c296a66022a990b22f734935a66b876a"
        ]
      },
      "link": "http://www.carbonblack.com",
      "score": 99,
      "tags": [
        "md5"
      ],
      "timestamp": 1571143956,
      "title": "CB Response QA ID70170133447789278768703804369333656"
    },
    {
      "description": "MD5 hash [58ce99ab4ca124973fe2bfee428862a0] ",
      "id": "ID36724710133780394307691457860616137.exe",
      "iocs": {
        "md5": [
          "58ce99ab4ca124973fe2bfee428862a0"
        ]
      },
      "link": "http://www.carbonblack.com",
      "score": 99,
      "tags": [
        "md5"
      ],
      "timestamp": 1571143956,
      "title": "CB Response QA ID36724710133780394307691457860616137"
    }
  ]
}"""


class TestCbFeed(TestCase):

    def test_load_and_dump(self):
        """
        Ensure that the load functionality works as expected.
        """
        feed = CbFeed.load(SOURCE)

        fi = feed.data['feedinfo'].data
        self.assertEqual('qafeedbbi893963562', fi['name'])
        self.assertEqual('QA Feed BBI893963562', fi['display_name'])

        rpts = feed.data['reports']
        self.assertEqual(2, len(rpts))

        check = feed.dump()
        self.assertEqual(SOURCE, check)

    def test_duplicate_report_ids(self):
        """
        Ensure that report ids cannot be the same..
        """
        feed = CbFeed.load(SOURCE)
        reps = feed.data['reports']
        reps[1].data['id'] = reps[0].data['id']

        with self.assertRaises(CbInvalidFeed) as err:
            feed.validate_report_list(reps)
        assert "duplicate report id" in "{0}".format(err.exception.args[0])

    def test_dumpjson(self):
        feed = CbFeed.load(SOURCE)
        json = feed.dumpjson()

        fi = feed.data['feedinfo'].data
        for key in fi.keys():
            self.assertEqual(fi[key], json['feedinfo'][key])

        check = {}
        for rpt in feed.data['reports']:
            check[rpt.data['id']] = rpt.data

        for rpt in json['reports']:
            entry = rpt['id']
            for key in rpt:
                self.assertEqual(check[entry][key], rpt[key])

    def test_iter_iocs(self):
        feed = CbFeed.load(SOURCE)

        check = {
            "ID36724710133780394307691457860616137.exe": "58ce99ab4ca124973fe2bfee428862a0",
            "ID70170133447789278768703804369333656.exe": "c296a66022a990b22f734935a66b876a"
        }
        for x in feed.iter_iocs():
            if x['report_id'] in check:
                del check[x['report_id']]
            else:
                self.fail("Saw unexepcted ioc: {0}".format(x))
        if len(check) > 0:
            self.fail("Did not see the following reports: {0}".format(check))
